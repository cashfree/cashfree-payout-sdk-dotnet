/*
 * Cashfree Payout APIs
 *
 * Cashfree's Payout APIs provide developers with a streamlined pathway to integrate advanced payout capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2024-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_payout.Client.OpenAPIDateConverter;

namespace cashfree_payout.Model
{
    /// <summary>
    /// Standard Transfer V2 Response
    /// </summary>
    [DataContract(Name = "CreateTransferResponse")]
    public class CreateTransferResponse : IEquatable<CreateTransferResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransferResponse" /> class.
        /// </summary>
        /// <param name="transferId">It displays the unique ID you created to identify the transfer..</param>
        /// <param name="cfTransferId">It displays the unique ID created by Cashfree Payments. You receive this ID in the response after initiating the standard transfer request..</param>
        /// <param name="status">It displays the status of the transfer..</param>
        /// <param name="beneficiaryDetails">beneficiaryDetails.</param>
        /// <param name="transferAmount">It displays the transfer amount initiated in the request..</param>
        /// <param name="transferServiceCharge">It displays the service charge applicable for the successful transfer request..</param>
        /// <param name="transferServiceTax">It displays the service tax applicable for the successful transfer request..</param>
        /// <param name="transferMode">It displays the mode of the transfer..</param>
        /// <param name="transferUtr">It displays the unique number that is generated to recognise any fund transfer that is created by the bank that facilitates the transfer..</param>
        /// <param name="fundsourceId">It displays the ID of the fund source from where the money was debited for this transfer request..</param>
        /// <param name="addedOn">It displays the time of when the transfer request was added to the system..</param>
        /// <param name="updatedOn">It displays the updated time for the transfer..</param>
        public CreateTransferResponse(string transferId = default(string), string cfTransferId = default(string), string status = default(string), CreateTransferResponseBeneficiaryDetails beneficiaryDetails = default(CreateTransferResponseBeneficiaryDetails), double transferAmount = default(double), double transferServiceCharge = default(double), double transferServiceTax = default(double), string transferMode = default(string), string transferUtr = default(string), string fundsourceId = default(string), string addedOn = default(string), string updatedOn = default(string))
        {
            this.transfer_id = transferId;
            this.cf_transfer_id = cfTransferId;
            this.status = status;
            this.beneficiary_details = beneficiaryDetails;
            this.transfer_amount = transferAmount;
            this.transfer_service_charge = transferServiceCharge;
            this.transfer_service_tax = transferServiceTax;
            this.transfer_mode = transferMode;
            this.transfer_utr = transferUtr;
            this.fundsource_id = fundsourceId;
            this.added_on = addedOn;
            this.updated_on = updatedOn;
        }

        /// <summary>
        /// It displays the unique ID you created to identify the transfer.
        /// </summary>
        /// <value>It displays the unique ID you created to identify the transfer.</value>
        [DataMember(Name = "transfer_id", EmitDefaultValue = false)]
        public string transfer_id { get; set; }

        /// <summary>
        /// It displays the unique ID created by Cashfree Payments. You receive this ID in the response after initiating the standard transfer request.
        /// </summary>
        /// <value>It displays the unique ID created by Cashfree Payments. You receive this ID in the response after initiating the standard transfer request.</value>
        [DataMember(Name = "cf_transfer_id", EmitDefaultValue = false)]
        public string cf_transfer_id { get; set; }

        /// <summary>
        /// It displays the status of the transfer.
        /// </summary>
        /// <value>It displays the status of the transfer.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string status { get; set; }

        /// <summary>
        /// Gets or Sets beneficiary_details
        /// </summary>
        [DataMember(Name = "beneficiary_details", EmitDefaultValue = false)]
        public CreateTransferResponseBeneficiaryDetails beneficiary_details { get; set; }

        /// <summary>
        /// It displays the transfer amount initiated in the request.
        /// </summary>
        /// <value>It displays the transfer amount initiated in the request.</value>
        [DataMember(Name = "transfer_amount", EmitDefaultValue = false)]
        public double transfer_amount { get; set; }

        /// <summary>
        /// It displays the service charge applicable for the successful transfer request.
        /// </summary>
        /// <value>It displays the service charge applicable for the successful transfer request.</value>
        [DataMember(Name = "transfer_service_charge", EmitDefaultValue = false)]
        public double transfer_service_charge { get; set; }

        /// <summary>
        /// It displays the service tax applicable for the successful transfer request.
        /// </summary>
        /// <value>It displays the service tax applicable for the successful transfer request.</value>
        [DataMember(Name = "transfer_service_tax", EmitDefaultValue = false)]
        public double transfer_service_tax { get; set; }

        /// <summary>
        /// It displays the mode of the transfer.
        /// </summary>
        /// <value>It displays the mode of the transfer.</value>
        [DataMember(Name = "transfer_mode", EmitDefaultValue = false)]
        public string transfer_mode { get; set; }

        /// <summary>
        /// It displays the unique number that is generated to recognise any fund transfer that is created by the bank that facilitates the transfer.
        /// </summary>
        /// <value>It displays the unique number that is generated to recognise any fund transfer that is created by the bank that facilitates the transfer.</value>
        [DataMember(Name = "transfer_utr", EmitDefaultValue = false)]
        public string transfer_utr { get; set; }

        /// <summary>
        /// It displays the ID of the fund source from where the money was debited for this transfer request.
        /// </summary>
        /// <value>It displays the ID of the fund source from where the money was debited for this transfer request.</value>
        [DataMember(Name = "fundsource_id", EmitDefaultValue = false)]
        public string fundsource_id { get; set; }

        /// <summary>
        /// It displays the time of when the transfer request was added to the system.
        /// </summary>
        /// <value>It displays the time of when the transfer request was added to the system.</value>
        [DataMember(Name = "added_on", EmitDefaultValue = false)]
        public string added_on { get; set; }

        /// <summary>
        /// It displays the updated time for the transfer.
        /// </summary>
        /// <value>It displays the updated time for the transfer.</value>
        [DataMember(Name = "updated_on", EmitDefaultValue = false)]
        public string updated_on { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTransferResponse {\n");
            sb.Append("  transfer_id: ").Append(transfer_id).Append("\n");
            sb.Append("  cf_transfer_id: ").Append(cf_transfer_id).Append("\n");
            sb.Append("  status: ").Append(status).Append("\n");
            sb.Append("  beneficiary_details: ").Append(beneficiary_details).Append("\n");
            sb.Append("  transfer_amount: ").Append(transfer_amount).Append("\n");
            sb.Append("  transfer_service_charge: ").Append(transfer_service_charge).Append("\n");
            sb.Append("  transfer_service_tax: ").Append(transfer_service_tax).Append("\n");
            sb.Append("  transfer_mode: ").Append(transfer_mode).Append("\n");
            sb.Append("  transfer_utr: ").Append(transfer_utr).Append("\n");
            sb.Append("  fundsource_id: ").Append(fundsource_id).Append("\n");
            sb.Append("  added_on: ").Append(added_on).Append("\n");
            sb.Append("  updated_on: ").Append(updated_on).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTransferResponse);
        }

        /// <summary>
        /// Returns true if CreateTransferResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTransferResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTransferResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.transfer_id == input.transfer_id ||
                    (this.transfer_id != null &&
                    this.transfer_id.Equals(input.transfer_id))
                ) && 
                (
                    this.cf_transfer_id == input.cf_transfer_id ||
                    (this.cf_transfer_id != null &&
                    this.cf_transfer_id.Equals(input.cf_transfer_id))
                ) && 
                (
                    this.status == input.status ||
                    (this.status != null &&
                    this.status.Equals(input.status))
                ) && 
                (
                    this.beneficiary_details == input.beneficiary_details ||
                    (this.beneficiary_details != null &&
                    this.beneficiary_details.Equals(input.beneficiary_details))
                ) && 
                (
                    this.transfer_amount == input.transfer_amount ||
                    this.transfer_amount.Equals(input.transfer_amount)
                ) && 
                (
                    this.transfer_service_charge == input.transfer_service_charge ||
                    this.transfer_service_charge.Equals(input.transfer_service_charge)
                ) && 
                (
                    this.transfer_service_tax == input.transfer_service_tax ||
                    this.transfer_service_tax.Equals(input.transfer_service_tax)
                ) && 
                (
                    this.transfer_mode == input.transfer_mode ||
                    (this.transfer_mode != null &&
                    this.transfer_mode.Equals(input.transfer_mode))
                ) && 
                (
                    this.transfer_utr == input.transfer_utr ||
                    (this.transfer_utr != null &&
                    this.transfer_utr.Equals(input.transfer_utr))
                ) && 
                (
                    this.fundsource_id == input.fundsource_id ||
                    (this.fundsource_id != null &&
                    this.fundsource_id.Equals(input.fundsource_id))
                ) && 
                (
                    this.added_on == input.added_on ||
                    (this.added_on != null &&
                    this.added_on.Equals(input.added_on))
                ) && 
                (
                    this.updated_on == input.updated_on ||
                    (this.updated_on != null &&
                    this.updated_on.Equals(input.updated_on))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringtransfer_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringtransfer_id);
            if (deserializedJsonString.ContainsKey("transfer_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.transfer_id != null)
                {
                    hashCode = (hashCode * 59) + this.transfer_id.GetHashCode();
                }
                if (this.cf_transfer_id != null)
                {
                    hashCode = (hashCode * 59) + this.cf_transfer_id.GetHashCode();
                }
                if (this.status != null)
                {
                    hashCode = (hashCode * 59) + this.status.GetHashCode();
                }
                if (this.beneficiary_details != null)
                {
                    hashCode = (hashCode * 59) + this.beneficiary_details.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.transfer_amount.GetHashCode();
                hashCode = (hashCode * 59) + this.transfer_service_charge.GetHashCode();
                hashCode = (hashCode * 59) + this.transfer_service_tax.GetHashCode();
                if (this.transfer_mode != null)
                {
                    hashCode = (hashCode * 59) + this.transfer_mode.GetHashCode();
                }
                if (this.transfer_utr != null)
                {
                    hashCode = (hashCode * 59) + this.transfer_utr.GetHashCode();
                }
                if (this.fundsource_id != null)
                {
                    hashCode = (hashCode * 59) + this.fundsource_id.GetHashCode();
                }
                if (this.added_on != null)
                {
                    hashCode = (hashCode * 59) + this.added_on.GetHashCode();
                }
                if (this.updated_on != null)
                {
                    hashCode = (hashCode * 59) + this.updated_on.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
