/*
 * Cashfree Payout APIs
 *
 * Cashfree's Payout APIs provide developers with a streamlined pathway to integrate advanced payout capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2024-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_payout.Client.OpenAPIDateConverter;

namespace cashfree_payout.Model
{
    /// <summary>
    /// Batch Transfer Status V2 Response
    /// </summary>
    [DataContract(Name = "FetchBatchTransferResponse")]
    public class FetchBatchTransferResponse : IEquatable<FetchBatchTransferResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FetchBatchTransferResponse" /> class.
        /// </summary>
        /// <param name="batchTransferId">It displays the unique ID you created to identify the batch transfer..</param>
        /// <param name="cfBatchTransferId">It displays the unique ID created by Cashfree Payments. You receive this ID in the response after initiating the batch transfer request..</param>
        /// <param name="status">It displays the status of the batch transfer..</param>
        /// <param name="transfers">transfers.</param>
        public FetchBatchTransferResponse(string batchTransferId = default(string), string cfBatchTransferId = default(string), string status = default(string), List<CreateTransferResponse> transfers = default(List<CreateTransferResponse>))
        {
            this.batch_transfer_id = batchTransferId;
            this.cf_batch_transfer_id = cfBatchTransferId;
            this.status = status;
            this.transfers = transfers;
        }

        /// <summary>
        /// It displays the unique ID you created to identify the batch transfer.
        /// </summary>
        /// <value>It displays the unique ID you created to identify the batch transfer.</value>
        [DataMember(Name = "batch_transfer_id", EmitDefaultValue = false)]
        public string batch_transfer_id { get; set; }

        /// <summary>
        /// It displays the unique ID created by Cashfree Payments. You receive this ID in the response after initiating the batch transfer request.
        /// </summary>
        /// <value>It displays the unique ID created by Cashfree Payments. You receive this ID in the response after initiating the batch transfer request.</value>
        [DataMember(Name = "cf_batch_transfer_id", EmitDefaultValue = false)]
        public string cf_batch_transfer_id { get; set; }

        /// <summary>
        /// It displays the status of the batch transfer.
        /// </summary>
        /// <value>It displays the status of the batch transfer.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string status { get; set; }

        /// <summary>
        /// Gets or Sets transfers
        /// </summary>
        [DataMember(Name = "transfers", EmitDefaultValue = false)]
        public List<CreateTransferResponse> transfers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FetchBatchTransferResponse {\n");
            sb.Append("  batch_transfer_id: ").Append(batch_transfer_id).Append("\n");
            sb.Append("  cf_batch_transfer_id: ").Append(cf_batch_transfer_id).Append("\n");
            sb.Append("  status: ").Append(status).Append("\n");
            sb.Append("  transfers: ").Append(transfers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FetchBatchTransferResponse);
        }

        /// <summary>
        /// Returns true if FetchBatchTransferResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FetchBatchTransferResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FetchBatchTransferResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.batch_transfer_id == input.batch_transfer_id ||
                    (this.batch_transfer_id != null &&
                    this.batch_transfer_id.Equals(input.batch_transfer_id))
                ) && 
                (
                    this.cf_batch_transfer_id == input.cf_batch_transfer_id ||
                    (this.cf_batch_transfer_id != null &&
                    this.cf_batch_transfer_id.Equals(input.cf_batch_transfer_id))
                ) && 
                (
                    this.status == input.status ||
                    (this.status != null &&
                    this.status.Equals(input.status))
                ) && 
                (
                    this.transfers == input.transfers ||
                    this.transfers != null &&
                    input.transfers != null &&
                    this.transfers.SequenceEqual(input.transfers)
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringbatch_transfer_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringbatch_transfer_id);
            if (deserializedJsonString.ContainsKey("batch_transfer_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.batch_transfer_id != null)
                {
                    hashCode = (hashCode * 59) + this.batch_transfer_id.GetHashCode();
                }
                if (this.cf_batch_transfer_id != null)
                {
                    hashCode = (hashCode * 59) + this.cf_batch_transfer_id.GetHashCode();
                }
                if (this.status != null)
                {
                    hashCode = (hashCode * 59) + this.status.GetHashCode();
                }
                if (this.transfers != null)
                {
                    hashCode = (hashCode * 59) + this.transfers.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
