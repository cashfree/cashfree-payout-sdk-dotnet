/*
 * Cashfree Payout APIs
 *
 * Cashfree's Payout APIs provide developers with a streamlined pathway to integrate advanced payout capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2024-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_payout.Client.OpenAPIDateConverter;

namespace cashfree_payout.Model
{
    /// <summary>
    /// It should contain the card details of the beneficiary.
    /// </summary>
    [DataContract(Name = "CreateTransferRequest_beneficiary_details_beneficiary_instrument_details_card_details")]
    public class CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails : IEquatable<CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails>, IValidatableObject
    {
        /// <summary>
        /// It is the network type of the card - VISA/MASTERCARD.
        /// </summary>
        /// <value>It is the network type of the card - VISA/MASTERCARD.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardNetworkTypeEnum
        {
            /// <summary>
            /// Enum VISA for value: VISA
            /// </summary>
            [EnumMember(Value = "VISA")]
            VISA = 1,

            /// <summary>
            /// Enum MASTERCARD for value: MASTERCARD
            /// </summary>
            [EnumMember(Value = "MASTERCARD")]
            MASTERCARD = 2
        }


        /// <summary>
        /// It is the network type of the card - VISA/MASTERCARD.
        /// </summary>
        /// <value>It is the network type of the card - VISA/MASTERCARD.</value>
        [DataMember(Name = "card_network_type", EmitDefaultValue = false)]
        public CardNetworkTypeEnum? card_network_type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails" /> class.
        /// </summary>
        /// <param name="cardToken">It is the tokenised card number or card token for this transfer..</param>
        /// <param name="cardNetworkType">It is the network type of the card - VISA/MASTERCARD..</param>
        /// <param name="cardCryptogram">It is the formatted chip/cryptogram data relating to the token cryptogram. The maximum character limit is 600. It is optional for MASTERCARD and not required for VISA..</param>
        /// <param name="cardTokenExpiry">It is applicable only for MASTERCARD. The format for the valid token expiry date should be YYYY-MM. It cannot be null. Provide a valid tokenExpiry if collected from the customers. If unavailable, populate a static value with a forward year and month in the correct format (YYYY-MM). The maximum character limit is 10..</param>
        /// <param name="cardType">It is the type of the card. DEBIT and CREDIT are the only values allowed. The default value is CREDIT if the parameter does not exist or not specified..</param>
        /// <param name="cardTokenPANSequenceNumber">A maximum of 3 alphanumeric characters are allowed. It is an optional parameter for MASTERCARD..</param>
        public CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails(string cardToken = default(string), CardNetworkTypeEnum? cardNetworkType = default(CardNetworkTypeEnum?), string cardCryptogram = default(string), string cardTokenExpiry = default(string), string cardType = default(string), string cardTokenPANSequenceNumber = default(string))
        {
            this.card_token = cardToken;
            this.card_network_type = cardNetworkType;
            this.card_cryptogram = cardCryptogram;
            this.card_token_expiry = cardTokenExpiry;
            this.card_type = cardType;
            this.card_token_PAN_sequence_number = cardTokenPANSequenceNumber;
        }

        /// <summary>
        /// It is the tokenised card number or card token for this transfer.
        /// </summary>
        /// <value>It is the tokenised card number or card token for this transfer.</value>
        [DataMember(Name = "card_token", EmitDefaultValue = false)]
        public string card_token { get; set; }

        /// <summary>
        /// It is the formatted chip/cryptogram data relating to the token cryptogram. The maximum character limit is 600. It is optional for MASTERCARD and not required for VISA.
        /// </summary>
        /// <value>It is the formatted chip/cryptogram data relating to the token cryptogram. The maximum character limit is 600. It is optional for MASTERCARD and not required for VISA.</value>
        [DataMember(Name = "card_cryptogram", EmitDefaultValue = false)]
        public string card_cryptogram { get; set; }

        /// <summary>
        /// It is applicable only for MASTERCARD. The format for the valid token expiry date should be YYYY-MM. It cannot be null. Provide a valid tokenExpiry if collected from the customers. If unavailable, populate a static value with a forward year and month in the correct format (YYYY-MM). The maximum character limit is 10.
        /// </summary>
        /// <value>It is applicable only for MASTERCARD. The format for the valid token expiry date should be YYYY-MM. It cannot be null. Provide a valid tokenExpiry if collected from the customers. If unavailable, populate a static value with a forward year and month in the correct format (YYYY-MM). The maximum character limit is 10.</value>
        [DataMember(Name = "card_token_expiry", EmitDefaultValue = false)]
        public string card_token_expiry { get; set; }

        /// <summary>
        /// It is the type of the card. DEBIT and CREDIT are the only values allowed. The default value is CREDIT if the parameter does not exist or not specified.
        /// </summary>
        /// <value>It is the type of the card. DEBIT and CREDIT are the only values allowed. The default value is CREDIT if the parameter does not exist or not specified.</value>
        [DataMember(Name = "card_type", EmitDefaultValue = false)]
        public string card_type { get; set; }

        /// <summary>
        /// A maximum of 3 alphanumeric characters are allowed. It is an optional parameter for MASTERCARD.
        /// </summary>
        /// <value>A maximum of 3 alphanumeric characters are allowed. It is an optional parameter for MASTERCARD.</value>
        [DataMember(Name = "card_token_PAN_sequence_number", EmitDefaultValue = false)]
        public string card_token_PAN_sequence_number { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails {\n");
            sb.Append("  card_token: ").Append(card_token).Append("\n");
            sb.Append("  card_network_type: ").Append(card_network_type).Append("\n");
            sb.Append("  card_cryptogram: ").Append(card_cryptogram).Append("\n");
            sb.Append("  card_token_expiry: ").Append(card_token_expiry).Append("\n");
            sb.Append("  card_type: ").Append(card_type).Append("\n");
            sb.Append("  card_token_PAN_sequence_number: ").Append(card_token_PAN_sequence_number).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails);
        }

        /// <summary>
        /// Returns true if CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.card_token == input.card_token ||
                    (this.card_token != null &&
                    this.card_token.Equals(input.card_token))
                ) && 
                (
                    this.card_network_type == input.card_network_type ||
                    this.card_network_type.Equals(input.card_network_type)
                ) && 
                (
                    this.card_cryptogram == input.card_cryptogram ||
                    (this.card_cryptogram != null &&
                    this.card_cryptogram.Equals(input.card_cryptogram))
                ) && 
                (
                    this.card_token_expiry == input.card_token_expiry ||
                    (this.card_token_expiry != null &&
                    this.card_token_expiry.Equals(input.card_token_expiry))
                ) && 
                (
                    this.card_type == input.card_type ||
                    (this.card_type != null &&
                    this.card_type.Equals(input.card_type))
                ) && 
                (
                    this.card_token_PAN_sequence_number == input.card_token_PAN_sequence_number ||
                    (this.card_token_PAN_sequence_number != null &&
                    this.card_token_PAN_sequence_number.Equals(input.card_token_PAN_sequence_number))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringcard_token) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringcard_token);
            if (deserializedJsonString.ContainsKey("card_token")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.card_token != null)
                {
                    hashCode = (hashCode * 59) + this.card_token.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.card_network_type.GetHashCode();
                if (this.card_cryptogram != null)
                {
                    hashCode = (hashCode * 59) + this.card_cryptogram.GetHashCode();
                }
                if (this.card_token_expiry != null)
                {
                    hashCode = (hashCode * 59) + this.card_token_expiry.GetHashCode();
                }
                if (this.card_type != null)
                {
                    hashCode = (hashCode * 59) + this.card_type.GetHashCode();
                }
                if (this.card_token_PAN_sequence_number != null)
                {
                    hashCode = (hashCode * 59) + this.card_token_PAN_sequence_number.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
