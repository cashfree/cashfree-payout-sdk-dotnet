/*
 * Cashfree Payout APIs
 *
 * Cashfree's Payout APIs provide developers with a streamlined pathway to integrate advanced payout capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2024-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_payout.Client.OpenAPIDateConverter;

namespace cashfree_payout.Model
{
    /// <summary>
    /// It displays the details of where the beneficiary will receive the money.
    /// </summary>
    [DataContract(Name = "CreateTransferResponse_beneficiary_details_beneficiary_instrument_details")]
    public class CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails : IEquatable<CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails" /> class.
        /// </summary>
        /// <param name="bankAccountNumber">It displays the bank account number of the beneficiary..</param>
        /// <param name="ifsc">It displays the IFSC information of the beneficiary&#39;s bank account..</param>
        /// <param name="vpa">It displays the UPI VPA information of the beneficiary..</param>
        public CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails(string bankAccountNumber = default(string), string ifsc = default(string), string vpa = default(string))
        {
            this.bank_account_number = bankAccountNumber;
            this.ifsc = ifsc;
            this.vpa = vpa;
        }

        /// <summary>
        /// It displays the bank account number of the beneficiary.
        /// </summary>
        /// <value>It displays the bank account number of the beneficiary.</value>
        [DataMember(Name = "bank_account_number", EmitDefaultValue = false)]
        public string bank_account_number { get; set; }

        /// <summary>
        /// It displays the IFSC information of the beneficiary&#39;s bank account.
        /// </summary>
        /// <value>It displays the IFSC information of the beneficiary&#39;s bank account.</value>
        [DataMember(Name = "ifsc", EmitDefaultValue = false)]
        public string ifsc { get; set; }

        /// <summary>
        /// It displays the UPI VPA information of the beneficiary.
        /// </summary>
        /// <value>It displays the UPI VPA information of the beneficiary.</value>
        [DataMember(Name = "vpa", EmitDefaultValue = false)]
        public string vpa { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails {\n");
            sb.Append("  bank_account_number: ").Append(bank_account_number).Append("\n");
            sb.Append("  ifsc: ").Append(ifsc).Append("\n");
            sb.Append("  vpa: ").Append(vpa).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails);
        }

        /// <summary>
        /// Returns true if CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.bank_account_number == input.bank_account_number ||
                    (this.bank_account_number != null &&
                    this.bank_account_number.Equals(input.bank_account_number))
                ) && 
                (
                    this.ifsc == input.ifsc ||
                    (this.ifsc != null &&
                    this.ifsc.Equals(input.ifsc))
                ) && 
                (
                    this.vpa == input.vpa ||
                    (this.vpa != null &&
                    this.vpa.Equals(input.vpa))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringbank_account_number) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringbank_account_number);
            if (deserializedJsonString.ContainsKey("bank_account_number")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.bank_account_number != null)
                {
                    hashCode = (hashCode * 59) + this.bank_account_number.GetHashCode();
                }
                if (this.ifsc != null)
                {
                    hashCode = (hashCode * 59) + this.ifsc.GetHashCode();
                }
                if (this.vpa != null)
                {
                    hashCode = (hashCode * 59) + this.vpa.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
