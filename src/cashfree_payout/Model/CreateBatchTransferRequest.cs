/*
 * Cashfree Payout APIs
 *
 * Cashfree's Payout APIs provide developers with a streamlined pathway to integrate advanced payout capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2024-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_payout.Client.OpenAPIDateConverter;

namespace cashfree_payout.Model
{
    /// <summary>
    /// Batch Transfer V2
    /// </summary>
    [DataContract(Name = "CreateBatchTransferRequest")]
    public class CreateBatchTransferRequest : IEquatable<CreateBatchTransferRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBatchTransferRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateBatchTransferRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBatchTransferRequest" /> class.
        /// </summary>
        /// <param name="batchTransferId">It is the unique ID you create to identify the batch transfer request. The maximum character limit is 60. Alphanumeric and underscore ( _ ) characters are allowed. (required).</param>
        /// <param name="transfers">transfers.</param>
        public CreateBatchTransferRequest(string batchTransferId = default(string), List<CreateBatchTransferRequestTransfersInner> transfers = default(List<CreateBatchTransferRequestTransfersInner>))
        {
            // to ensure "batchTransferId" is required (not null)
            if (batchTransferId == null)
            {
                throw new ArgumentNullException("batchTransferId is a required property for CreateBatchTransferRequest and cannot be null");
            }
            this.batch_transfer_id = batchTransferId;
            this.transfers = transfers;
        }

        /// <summary>
        /// It is the unique ID you create to identify the batch transfer request. The maximum character limit is 60. Alphanumeric and underscore ( _ ) characters are allowed.
        /// </summary>
        /// <value>It is the unique ID you create to identify the batch transfer request. The maximum character limit is 60. Alphanumeric and underscore ( _ ) characters are allowed.</value>
        [DataMember(Name = "batch_transfer_id", IsRequired = true, EmitDefaultValue = true)]
        public string batch_transfer_id { get; set; }

        /// <summary>
        /// Gets or Sets transfers
        /// </summary>
        [DataMember(Name = "transfers", EmitDefaultValue = false)]
        public List<CreateBatchTransferRequestTransfersInner> transfers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateBatchTransferRequest {\n");
            sb.Append("  batch_transfer_id: ").Append(batch_transfer_id).Append("\n");
            sb.Append("  transfers: ").Append(transfers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateBatchTransferRequest);
        }

        /// <summary>
        /// Returns true if CreateBatchTransferRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateBatchTransferRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateBatchTransferRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.batch_transfer_id == input.batch_transfer_id ||
                    (this.batch_transfer_id != null &&
                    this.batch_transfer_id.Equals(input.batch_transfer_id))
                ) && 
                (
                    this.transfers == input.transfers ||
                    this.transfers != null &&
                    input.transfers != null &&
                    this.transfers.SequenceEqual(input.transfers)
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringbatch_transfer_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringbatch_transfer_id);
            if (deserializedJsonString.ContainsKey("batch_transfer_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.batch_transfer_id != null)
                {
                    hashCode = (hashCode * 59) + this.batch_transfer_id.GetHashCode();
                }
                if (this.transfers != null)
                {
                    hashCode = (hashCode * 59) + this.transfers.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // batch_transfer_id (string) maxLength
            if (this.batch_transfer_id != null && this.batch_transfer_id.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for batch_transfer_id, length must be less than 60.", new [] { "batch_transfer_id" });
            }

            yield break;
        }
    }

}
