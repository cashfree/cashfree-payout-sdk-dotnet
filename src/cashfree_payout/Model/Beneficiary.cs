/*
 * Cashfree Payout APIs
 *
 * Cashfree's Payout APIs provide developers with a streamlined pathway to integrate advanced payout capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2024-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cashfree_payout.Client.OpenAPIDateConverter;

namespace cashfree_payout.Model
{
    /// <summary>
    /// Contains the information of the created beneficiary
    /// </summary>
    [DataContract(Name = "Beneficiary")]
    public class Beneficiary : IEquatable<Beneficiary>, IValidatableObject
    {
        /// <summary>
        /// It displays the current status of the beneficiary. Possible values are as follows - &#x60;VERIFIED&#x60;: Beneficiary is verified and is available for payouts - &#x60;INVALID&#x60;: Beneficiary is invalid - &#x60;INITIATED&#x60;: Beneficiary verification initiated - &#x60;CANCELLED&#x60;: Beneficiary verification cancelled - &#x60;FAILED&#x60;: Failed to verify beneficiary - &#x60;DELETED&#x60;: Beneficiary is deleted
        /// </summary>
        /// <value>It displays the current status of the beneficiary. Possible values are as follows - &#x60;VERIFIED&#x60;: Beneficiary is verified and is available for payouts - &#x60;INVALID&#x60;: Beneficiary is invalid - &#x60;INITIATED&#x60;: Beneficiary verification initiated - &#x60;CANCELLED&#x60;: Beneficiary verification cancelled - &#x60;FAILED&#x60;: Failed to verify beneficiary - &#x60;DELETED&#x60;: Beneficiary is deleted</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BeneficiaryStatusEnum
        {
            /// <summary>
            /// Enum VERIFIED for value: VERIFIED
            /// </summary>
            [EnumMember(Value = "VERIFIED")]
            VERIFIED = 1,

            /// <summary>
            /// Enum INVALID for value: INVALID
            /// </summary>
            [EnumMember(Value = "INVALID")]
            INVALID = 2,

            /// <summary>
            /// Enum INITIATED for value: INITIATED
            /// </summary>
            [EnumMember(Value = "INITIATED")]
            INITIATED = 3,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 4,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 5,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 6
        }


        /// <summary>
        /// It displays the current status of the beneficiary. Possible values are as follows - &#x60;VERIFIED&#x60;: Beneficiary is verified and is available for payouts - &#x60;INVALID&#x60;: Beneficiary is invalid - &#x60;INITIATED&#x60;: Beneficiary verification initiated - &#x60;CANCELLED&#x60;: Beneficiary verification cancelled - &#x60;FAILED&#x60;: Failed to verify beneficiary - &#x60;DELETED&#x60;: Beneficiary is deleted
        /// </summary>
        /// <value>It displays the current status of the beneficiary. Possible values are as follows - &#x60;VERIFIED&#x60;: Beneficiary is verified and is available for payouts - &#x60;INVALID&#x60;: Beneficiary is invalid - &#x60;INITIATED&#x60;: Beneficiary verification initiated - &#x60;CANCELLED&#x60;: Beneficiary verification cancelled - &#x60;FAILED&#x60;: Failed to verify beneficiary - &#x60;DELETED&#x60;: Beneficiary is deleted</value>
        /// <example>VERIFIED</example>
        [DataMember(Name = "beneficiary_status", EmitDefaultValue = false)]
        public BeneficiaryStatusEnum? beneficiary_status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Beneficiary" /> class.
        /// </summary>
        /// <param name="beneficiaryId">It displays the unique Id you created to identify the beneficiary..</param>
        /// <param name="beneficiaryName">It displays the name of the beneficiary..</param>
        /// <param name="beneficiaryInstrumentDetails">beneficiaryInstrumentDetails.</param>
        /// <param name="beneficiaryContactDetails">beneficiaryContactDetails.</param>
        /// <param name="beneficiaryStatus">It displays the current status of the beneficiary. Possible values are as follows - &#x60;VERIFIED&#x60;: Beneficiary is verified and is available for payouts - &#x60;INVALID&#x60;: Beneficiary is invalid - &#x60;INITIATED&#x60;: Beneficiary verification initiated - &#x60;CANCELLED&#x60;: Beneficiary verification cancelled - &#x60;FAILED&#x60;: Failed to verify beneficiary - &#x60;DELETED&#x60;: Beneficiary is deleted.</param>
        /// <param name="addedOn">It displays the time of the addition of the beneficiary in UTC..</param>
        public Beneficiary(string beneficiaryId = default(string), string beneficiaryName = default(string), BeneficiaryBeneficiaryInstrumentDetails beneficiaryInstrumentDetails = default(BeneficiaryBeneficiaryInstrumentDetails), BeneficiaryBeneficiaryContactDetails beneficiaryContactDetails = default(BeneficiaryBeneficiaryContactDetails), BeneficiaryStatusEnum? beneficiaryStatus = default(BeneficiaryStatusEnum?), string addedOn = default(string))
        {
            this.beneficiary_id = beneficiaryId;
            this.beneficiary_name = beneficiaryName;
            this.beneficiary_instrument_details = beneficiaryInstrumentDetails;
            this.beneficiary_contact_details = beneficiaryContactDetails;
            this.beneficiary_status = beneficiaryStatus;
            this.added_on = addedOn;
        }

        /// <summary>
        /// It displays the unique Id you created to identify the beneficiary.
        /// </summary>
        /// <value>It displays the unique Id you created to identify the beneficiary.</value>
        /// <example>JOHN18011343</example>
        [DataMember(Name = "beneficiary_id", EmitDefaultValue = false)]
        public string beneficiary_id { get; set; }

        /// <summary>
        /// It displays the name of the beneficiary.
        /// </summary>
        /// <value>It displays the name of the beneficiary.</value>
        /// <example>John Doe</example>
        [DataMember(Name = "beneficiary_name", EmitDefaultValue = false)]
        public string beneficiary_name { get; set; }

        /// <summary>
        /// Gets or Sets beneficiary_instrument_details
        /// </summary>
        [DataMember(Name = "beneficiary_instrument_details", EmitDefaultValue = false)]
        public BeneficiaryBeneficiaryInstrumentDetails beneficiary_instrument_details { get; set; }

        /// <summary>
        /// Gets or Sets beneficiary_contact_details
        /// </summary>
        [DataMember(Name = "beneficiary_contact_details", EmitDefaultValue = false)]
        public BeneficiaryBeneficiaryContactDetails beneficiary_contact_details { get; set; }

        /// <summary>
        /// It displays the time of the addition of the beneficiary in UTC.
        /// </summary>
        /// <value>It displays the time of the addition of the beneficiary in UTC.</value>
        /// <example>2023-11-22T12:38:22Z</example>
        [DataMember(Name = "added_on", EmitDefaultValue = false)]
        public string added_on { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Beneficiary {\n");
            sb.Append("  beneficiary_id: ").Append(beneficiary_id).Append("\n");
            sb.Append("  beneficiary_name: ").Append(beneficiary_name).Append("\n");
            sb.Append("  beneficiary_instrument_details: ").Append(beneficiary_instrument_details).Append("\n");
            sb.Append("  beneficiary_contact_details: ").Append(beneficiary_contact_details).Append("\n");
            sb.Append("  beneficiary_status: ").Append(beneficiary_status).Append("\n");
            sb.Append("  added_on: ").Append(added_on).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Beneficiary);
        }

        /// <summary>
        /// Returns true if Beneficiary instances are equal
        /// </summary>
        /// <param name="input">Instance of Beneficiary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Beneficiary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.beneficiary_id == input.beneficiary_id ||
                    (this.beneficiary_id != null &&
                    this.beneficiary_id.Equals(input.beneficiary_id))
                ) && 
                (
                    this.beneficiary_name == input.beneficiary_name ||
                    (this.beneficiary_name != null &&
                    this.beneficiary_name.Equals(input.beneficiary_name))
                ) && 
                (
                    this.beneficiary_instrument_details == input.beneficiary_instrument_details ||
                    (this.beneficiary_instrument_details != null &&
                    this.beneficiary_instrument_details.Equals(input.beneficiary_instrument_details))
                ) && 
                (
                    this.beneficiary_contact_details == input.beneficiary_contact_details ||
                    (this.beneficiary_contact_details != null &&
                    this.beneficiary_contact_details.Equals(input.beneficiary_contact_details))
                ) && 
                (
                    this.beneficiary_status == input.beneficiary_status ||
                    this.beneficiary_status.Equals(input.beneficiary_status)
                ) && 
                (
                    this.added_on == input.added_on ||
                    (this.added_on != null &&
                    this.added_on.Equals(input.added_on))
                );
        }

        public static Boolean checkPresenceOfKey(string jsonStringbeneficiary_id) {
            dynamic deserializedJsonString = JsonConvert.DeserializeObject<dynamic>(jsonStringbeneficiary_id);
            if (deserializedJsonString.ContainsKey("beneficiary_id")) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.beneficiary_id != null)
                {
                    hashCode = (hashCode * 59) + this.beneficiary_id.GetHashCode();
                }
                if (this.beneficiary_name != null)
                {
                    hashCode = (hashCode * 59) + this.beneficiary_name.GetHashCode();
                }
                if (this.beneficiary_instrument_details != null)
                {
                    hashCode = (hashCode * 59) + this.beneficiary_instrument_details.GetHashCode();
                }
                if (this.beneficiary_contact_details != null)
                {
                    hashCode = (hashCode * 59) + this.beneficiary_contact_details.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.beneficiary_status.GetHashCode();
                if (this.added_on != null)
                {
                    hashCode = (hashCode * 59) + this.added_on.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
