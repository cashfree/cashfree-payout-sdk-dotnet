/*
 * Cashfree Payout APIs
 *
 * Cashfree's Payout APIs provide developers with a streamlined pathway to integrate advanced payout capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2024-01-01
 * Contact: developers@cashfree.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Text;
using System.Threading;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Security.Cryptography;
using Sentry;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using RestSharp;
using RestSharp.Serializers;
using RestSharpMethod = RestSharp.Method;
using Polly;
using cashfree_payout.Model;

using Sentry.Extensibility;
using System.Collections.Generic;
using Sentry.Integrations;
using Sentry.Internal;
using Sentry.Internal.Extensions;
using Sentry.Protocol;
using System.Linq;

namespace cashfree_payout.Client
{

    public enum CFEnvironment {
        SANDBOX,
        PRODUCTION
    }

    public class PayoutWebhookEvent
    {
        String type;
        String rawBody;
        dynamic obj;

        public PayoutWebhookEvent(String type, String rawBody, dynamic obj)
        {
            this.type = type;
            this.rawBody = rawBody;
            this.obj = obj;
        }
    }

    class CashfreeEventProcessor : ISentryEventProcessor
    {
        public SentryEvent? Process(SentryEvent @event)
        {
            // Add anything to the event here
            // returning `null` will drop the event
            List<SentryException> exceptionList = @event.SentryExceptions.ToList();
            if (exceptionList.Count > 0 &&  exceptionList[0].Stacktrace.Frames.Count > 0 && exceptionList[0].Stacktrace.Frames[0].FileName.Contains("cashfree"))
            {
                if(Cashfree.XEnableErrorAnalytics) {
                    return @event;
                }
                return null;
            }
            return null;
        }
    }

    public class Cashfree {

        public static string XClientId = "";
        public static string XClientSecret = "";
        public static CFEnvironment XEnvironment = CFEnvironment.SANDBOX;
        public static bool XEnableErrorAnalytics = true;

        public static CFEnvironment SANDBOX = CFEnvironment.SANDBOX;
        public static CFEnvironment PRODUCTION = CFEnvironment.PRODUCTION;

        public static string XApiVersion = "2024-01-01";

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        private cashfree_payout.Client.ISynchronousClient Client { get; set; }

        private cashfree_payout.Client.ExceptionFactory ExceptionFactory = (name, response) => null;

        /// <summary>
        /// Signature that is received through webhooks can be verified using this method
        /// </summary>
        /// <exception cref="Exception">Thrown when fails to make API call</exception>
        /// <param name="signature">x-webhook-signature that is present in the header of a webhook received from Cashfree</param>
        /// <param name="rawBody">The body of the request in string format</param>
        /// <param name="timestamp">x-webhook-timestamp that is present in the header of a webhook received from Cashfree</param>
        /// <returns>Response of PayoutWebhookEvent</returns>
        public PayoutWebhookEvent PayoutVerifyWebhookSignature(string signature, string rawBody, string timestamp)
        {
            string secretKey = Cashfree.XClientSecret;
            string body = timestamp + rawBody;
            using (var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secretKey)))
            {
                byte[] hashBytes = hmac.ComputeHash(Encoding.UTF8.GetBytes(body));
                string generatedSignature = Convert.ToBase64String(hashBytes);
                if (generatedSignature == signature)
                {
                    dynamic deserializedRawBody = JsonConvert.DeserializeObject<dynamic>(rawBody);
                    return new PayoutWebhookEvent(deserializedRawBody["type"] as String, rawBody, deserializedRawBody);
                }
                throw new Exception("Generated signature and received signature did not match.");
            }
        }

        /// <summary>
        /// Create Beneficiary V2 Use this API to add a beneficiary to your Cashfree Payments account by providing the bank account number, IFSC, and other required details. Ensure the successful creation of the benficiary in your account before initiating a transfer.
        /// </summary>
        /// <exception cref="cashfree_payout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">It is the API version to be used. The accepted format is YYYY-MM-DD.</param>
        /// <param name="xRequestId">It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments. (optional)</param>
        /// <param name="createBeneficiaryRequest">Find the request parameters to create a beneficiary (optional)</param>
        /// <returns>ApiResponse of Beneficiary</returns>
        public cashfree_payout.Client.ApiResponse<Beneficiary> PayoutCreateBeneficiary(string xApiVersion, string? xRequestId = default(string?), CreateBeneficiaryRequest? createBeneficiaryRequest = default(CreateBeneficiaryRequest?), Configuration? configuration = null)
        {
            var env = "sandbox";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
            if(Cashfree.XEnableErrorAnalytics) {
                using (SentrySdk.Init(o =>
                {
                    o.Dsn = "https://7674ee5291124b76894cb90a9ac6a33b@o330525.ingest.sentry.io/4505164135464960";
                    // When configuring for the first time, to see what the SDK is doing:
                    o.Debug = true;
                    // Set traces_sample_rate to 1.0 to capture 100% of transactions for performance monitoring.
                    // We recommend adjusting this value in production.
                    o.TracesSampleRate = 1.0;
                    // Enable Global Mode if running in a client app
                    o.IsGlobalModeEnabled = false;
                    o.EnableTracing = true;
                    o.AttachStacktrace = true;
                    o.Environment = env;
                    o.Release = "0.0.16";
                    o.AddEventProcessor(new CashfreeEventProcessor());
                }));
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_payout.Client.ApiClient("https://sandbox.cashfree.com/payout");
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_payout.Client.ApiClient("https://api.cashfree.com/payout");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_payout.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling BeneficiaryV2Api->PayoutCreateBeneficiary");

            cashfree_payout.Client.RequestOptions localVarRequestOptions = new cashfree_payout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_payout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_payout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_payout.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_payout.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            localVarRequestOptions.Data = createBeneficiaryRequest;

            // authentication (XClientSecret) required
            
            
            // authentication (XClientID) required
            
            

            if (!string.IsNullOrEmpty(Cashfree.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", Cashfree.XClientId);
            }

            if (!string.IsNullOrEmpty(Cashfree.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", Cashfree.XClientSecret);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-0.0.16");

            // make the HTTP request
            var localVarResponse = this.Client.Post<Beneficiary>("/beneficiary", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayoutCreateBeneficiary", localVarResponse);
                if (_exception != null) {
                    if(Cashfree.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Remove Beneficiary V2 Use this API to remove an existing beneficiary from the list of added beneficiaries.
        /// </summary>
        /// <exception cref="cashfree_payout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">It is the API version to be used. The accepted format is YYYY-MM-DD.</param>
        /// <param name="xRequestId">It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments. (optional)</param>
        /// <param name="beneficiaryId">It is the unique ID you create to identify the beneficiary. The maximum character limit is 50. Only alphabets and whitespaces are allowed. (optional)</param>
        /// <returns>ApiResponse of Beneficiary</returns>
        public cashfree_payout.Client.ApiResponse<Beneficiary> PayoutDeleteBeneficiary(string xApiVersion, string? xRequestId = default(string?), string? beneficiaryId = default(string?), Configuration? configuration = null)
        {
            var env = "sandbox";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
            if(Cashfree.XEnableErrorAnalytics) {
                using (SentrySdk.Init(o =>
                {
                    o.Dsn = "https://7674ee5291124b76894cb90a9ac6a33b@o330525.ingest.sentry.io/4505164135464960";
                    // When configuring for the first time, to see what the SDK is doing:
                    o.Debug = true;
                    // Set traces_sample_rate to 1.0 to capture 100% of transactions for performance monitoring.
                    // We recommend adjusting this value in production.
                    o.TracesSampleRate = 1.0;
                    // Enable Global Mode if running in a client app
                    o.IsGlobalModeEnabled = false;
                    o.EnableTracing = true;
                    o.AttachStacktrace = true;
                    o.Environment = env;
                    o.Release = "0.0.16";
                    o.AddEventProcessor(new CashfreeEventProcessor());
                }));
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_payout.Client.ApiClient("https://sandbox.cashfree.com/payout");
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_payout.Client.ApiClient("https://api.cashfree.com/payout");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_payout.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling BeneficiaryV2Api->PayoutDeleteBeneficiary");

            cashfree_payout.Client.RequestOptions localVarRequestOptions = new cashfree_payout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_payout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_payout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (beneficiaryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(cashfree_payout.Client.ClientUtils.ParameterToMultiMap("", "beneficiary_id", beneficiaryId));
            }
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_payout.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_payout.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }

            // authentication (XClientSecret) required
            
            
            // authentication (XClientID) required
            
            

            if (!string.IsNullOrEmpty(Cashfree.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", Cashfree.XClientId);
            }

            if (!string.IsNullOrEmpty(Cashfree.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", Cashfree.XClientSecret);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-0.0.16");

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Beneficiary>("/beneficiary", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayoutDeleteBeneficiary", localVarResponse);
                if (_exception != null) {
                    if(Cashfree.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Beneficiary V2 Use this API to get the details of a particular beneficiary from your account. You can pass either beneficiary_id or the combination of bank_account_number and bank_ifsc to fetch the details.
        /// </summary>
        /// <exception cref="cashfree_payout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">It is the API version to be used. The accepted format is YYYY-MM-DD.</param>
        /// <param name="xRequestId">It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments. (optional)</param>
        /// <param name="beneficiaryId">It is the unique ID you created to identify the beneficiary while creating the beneficiary. (optional)</param>
        /// <param name="bankAccountNumber">It is the bank account number of the beneficiary. If bank_account_number is passed in query, bank_ifsc should also be passed. (optional)</param>
        /// <param name="bankIfsc">It is the IFSC information as present in the beneficiary&#39;s bank account information. If bank_ifsc is passed in query, bank_account_number should also be passed. (optional)</param>
        /// <returns>ApiResponse of Beneficiary</returns>
        public cashfree_payout.Client.ApiResponse<Beneficiary> PayoutFetchBeneficiary(string xApiVersion, string? xRequestId = default(string?), string? beneficiaryId = default(string?), string? bankAccountNumber = default(string?), string? bankIfsc = default(string?), Configuration? configuration = null)
        {
            var env = "sandbox";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
            if(Cashfree.XEnableErrorAnalytics) {
                using (SentrySdk.Init(o =>
                {
                    o.Dsn = "https://7674ee5291124b76894cb90a9ac6a33b@o330525.ingest.sentry.io/4505164135464960";
                    // When configuring for the first time, to see what the SDK is doing:
                    o.Debug = true;
                    // Set traces_sample_rate to 1.0 to capture 100% of transactions for performance monitoring.
                    // We recommend adjusting this value in production.
                    o.TracesSampleRate = 1.0;
                    // Enable Global Mode if running in a client app
                    o.IsGlobalModeEnabled = false;
                    o.EnableTracing = true;
                    o.AttachStacktrace = true;
                    o.Environment = env;
                    o.Release = "0.0.16";
                    o.AddEventProcessor(new CashfreeEventProcessor());
                }));
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_payout.Client.ApiClient("https://sandbox.cashfree.com/payout");
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_payout.Client.ApiClient("https://api.cashfree.com/payout");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_payout.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling BeneficiaryV2Api->PayoutFetchBeneficiary");

            cashfree_payout.Client.RequestOptions localVarRequestOptions = new cashfree_payout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_payout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_payout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (beneficiaryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(cashfree_payout.Client.ClientUtils.ParameterToMultiMap("", "beneficiary_id", beneficiaryId));
            }
            if (bankAccountNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(cashfree_payout.Client.ClientUtils.ParameterToMultiMap("", "bank_account_number", bankAccountNumber));
            }
            if (bankIfsc != null)
            {
                localVarRequestOptions.QueryParameters.Add(cashfree_payout.Client.ClientUtils.ParameterToMultiMap("", "bank_ifsc", bankIfsc));
            }
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_payout.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_payout.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }

            // authentication (XClientSecret) required
            
            
            // authentication (XClientID) required
            
            

            if (!string.IsNullOrEmpty(Cashfree.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", Cashfree.XClientId);
            }

            if (!string.IsNullOrEmpty(Cashfree.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", Cashfree.XClientSecret);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-0.0.16");

            // make the HTTP request
            var localVarResponse = this.Client.Get<Beneficiary>("/beneficiary", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayoutFetchBeneficiary", localVarResponse);
                if (_exception != null) {
                    if(Cashfree.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Batch Transfer Status V2 Use this API to get the status of the initiated batch transfer. You can use either the batch_transfer_id or cf_batch_transfer_id to fetch the details.
        /// </summary>
        /// <exception cref="cashfree_payout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">It is the API version to be used. The accepted format is YYYY-MM-DD.</param>
        /// <param name="xRequestId">It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments. (optional)</param>
        /// <param name="cfBatchTransferId">It is the unique ID created by Cashfree Payments. You receive it in the response of the initiated batch transfer request. (Either cf_batch_transfer_id or batch_transfer_id is mandatory) (optional)</param>
        /// <param name="batchTransferId">It is the unique ID you created to identify the batch transfer request. (optional)</param>
        /// <returns>ApiResponse of FetchBatchTransferResponse</returns>
        public cashfree_payout.Client.ApiResponse<FetchBatchTransferResponse> PayoutFetchBatchTransfer(string xApiVersion, string? xRequestId = default(string?), string? cfBatchTransferId = default(string?), string? batchTransferId = default(string?), Configuration? configuration = null)
        {
            var env = "sandbox";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
            if(Cashfree.XEnableErrorAnalytics) {
                using (SentrySdk.Init(o =>
                {
                    o.Dsn = "https://7674ee5291124b76894cb90a9ac6a33b@o330525.ingest.sentry.io/4505164135464960";
                    // When configuring for the first time, to see what the SDK is doing:
                    o.Debug = true;
                    // Set traces_sample_rate to 1.0 to capture 100% of transactions for performance monitoring.
                    // We recommend adjusting this value in production.
                    o.TracesSampleRate = 1.0;
                    // Enable Global Mode if running in a client app
                    o.IsGlobalModeEnabled = false;
                    o.EnableTracing = true;
                    o.AttachStacktrace = true;
                    o.Environment = env;
                    o.Release = "0.0.16";
                    o.AddEventProcessor(new CashfreeEventProcessor());
                }));
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_payout.Client.ApiClient("https://sandbox.cashfree.com/payout");
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_payout.Client.ApiClient("https://api.cashfree.com/payout");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_payout.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling TransfersV2Api->PayoutFetchBatchTransfer");

            cashfree_payout.Client.RequestOptions localVarRequestOptions = new cashfree_payout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_payout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_payout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cfBatchTransferId != null)
            {
                localVarRequestOptions.QueryParameters.Add(cashfree_payout.Client.ClientUtils.ParameterToMultiMap("", "cf_batch_transfer_id", cfBatchTransferId));
            }
            if (batchTransferId != null)
            {
                localVarRequestOptions.QueryParameters.Add(cashfree_payout.Client.ClientUtils.ParameterToMultiMap("", "batch_transfer_id", batchTransferId));
            }
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_payout.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_payout.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }

            // authentication (XClientSecret) required
            
            
            // authentication (XClientID) required
            
            

            if (!string.IsNullOrEmpty(Cashfree.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", Cashfree.XClientId);
            }

            if (!string.IsNullOrEmpty(Cashfree.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", Cashfree.XClientSecret);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-0.0.16");

            // make the HTTP request
            var localVarResponse = this.Client.Get<FetchBatchTransferResponse>("/transfers/batch", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayoutFetchBatchTransfer", localVarResponse);
                if (_exception != null) {
                    if(Cashfree.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Get Transfer Status V2 Use this API to get the status of the initiated transfer. You can use either the transfer_id or cf_transfer_id to fetch the details.
        /// </summary>
        /// <exception cref="cashfree_payout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">It is the API version to be used. The accepted format is YYYY-MM-DD.</param>
        /// <param name="xRequestId">It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments. (optional)</param>
        /// <param name="cfTransferId">It is the unique ID created by Cashfree Payments. You receive it in the response of the initiated standard transfer request. (Either cf_transfer_id or transfer_id is mandatory) (optional)</param>
        /// <param name="transferId">It is the unique ID you created to identify the standard transfer request. (optional)</param>
        /// <returns>ApiResponse of CreateTransferResponse</returns>
        public cashfree_payout.Client.ApiResponse<CreateTransferResponse> PayoutFetchTransfer(string xApiVersion, string? xRequestId = default(string?), string? cfTransferId = default(string?), string? transferId = default(string?), Configuration? configuration = null)
        {
            var env = "sandbox";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
            if(Cashfree.XEnableErrorAnalytics) {
                using (SentrySdk.Init(o =>
                {
                    o.Dsn = "https://7674ee5291124b76894cb90a9ac6a33b@o330525.ingest.sentry.io/4505164135464960";
                    // When configuring for the first time, to see what the SDK is doing:
                    o.Debug = true;
                    // Set traces_sample_rate to 1.0 to capture 100% of transactions for performance monitoring.
                    // We recommend adjusting this value in production.
                    o.TracesSampleRate = 1.0;
                    // Enable Global Mode if running in a client app
                    o.IsGlobalModeEnabled = false;
                    o.EnableTracing = true;
                    o.AttachStacktrace = true;
                    o.Environment = env;
                    o.Release = "0.0.16";
                    o.AddEventProcessor(new CashfreeEventProcessor());
                }));
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_payout.Client.ApiClient("https://sandbox.cashfree.com/payout");
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_payout.Client.ApiClient("https://api.cashfree.com/payout");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_payout.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling TransfersV2Api->PayoutFetchTransfer");

            cashfree_payout.Client.RequestOptions localVarRequestOptions = new cashfree_payout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_payout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_payout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cfTransferId != null)
            {
                localVarRequestOptions.QueryParameters.Add(cashfree_payout.Client.ClientUtils.ParameterToMultiMap("", "cf_transfer_id", cfTransferId));
            }
            if (transferId != null)
            {
                localVarRequestOptions.QueryParameters.Add(cashfree_payout.Client.ClientUtils.ParameterToMultiMap("", "transfer_id", transferId));
            }
            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_payout.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_payout.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }

            // authentication (XClientSecret) required
            
            
            // authentication (XClientID) required
            
            

            if (!string.IsNullOrEmpty(Cashfree.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", Cashfree.XClientId);
            }

            if (!string.IsNullOrEmpty(Cashfree.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", Cashfree.XClientSecret);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-0.0.16");

            // make the HTTP request
            var localVarResponse = this.Client.Get<CreateTransferResponse>("/transfers", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayoutFetchTransfer", localVarResponse);
                if (_exception != null) {
                    if(Cashfree.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Batch Transfer V2 Use this API to initiate a batch transfer request at Cashfree Payments. You can transfer money to multiple beneficiaries.
        /// </summary>
        /// <exception cref="cashfree_payout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">It is the API version to be used. The accepted format is YYYY-MM-DD.</param>
        /// <param name="xRequestId">It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments. (optional)</param>
        /// <param name="createBatchTransferRequest">Find the request parameters of the API request to transfer money to multiple beneficiaries. (optional)</param>
        /// <returns>ApiResponse of CreateBatchTransferResponse</returns>
        public cashfree_payout.Client.ApiResponse<CreateBatchTransferResponse> PayoutInitiateBatchTransfer(string xApiVersion, string? xRequestId = default(string?), CreateBatchTransferRequest? createBatchTransferRequest = default(CreateBatchTransferRequest?), Configuration? configuration = null)
        {
            var env = "sandbox";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
            if(Cashfree.XEnableErrorAnalytics) {
                using (SentrySdk.Init(o =>
                {
                    o.Dsn = "https://7674ee5291124b76894cb90a9ac6a33b@o330525.ingest.sentry.io/4505164135464960";
                    // When configuring for the first time, to see what the SDK is doing:
                    o.Debug = true;
                    // Set traces_sample_rate to 1.0 to capture 100% of transactions for performance monitoring.
                    // We recommend adjusting this value in production.
                    o.TracesSampleRate = 1.0;
                    // Enable Global Mode if running in a client app
                    o.IsGlobalModeEnabled = false;
                    o.EnableTracing = true;
                    o.AttachStacktrace = true;
                    o.Environment = env;
                    o.Release = "0.0.16";
                    o.AddEventProcessor(new CashfreeEventProcessor());
                }));
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_payout.Client.ApiClient("https://sandbox.cashfree.com/payout");
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_payout.Client.ApiClient("https://api.cashfree.com/payout");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_payout.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling TransfersV2Api->PayoutInitiateBatchTransfer");

            cashfree_payout.Client.RequestOptions localVarRequestOptions = new cashfree_payout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_payout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_payout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_payout.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_payout.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            localVarRequestOptions.Data = createBatchTransferRequest;

            // authentication (XClientSecret) required
            
            
            // authentication (XClientID) required
            
            

            if (!string.IsNullOrEmpty(Cashfree.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", Cashfree.XClientId);
            }

            if (!string.IsNullOrEmpty(Cashfree.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", Cashfree.XClientSecret);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-0.0.16");

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateBatchTransferResponse>("/transfers/batch", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayoutInitiateBatchTransfer", localVarResponse);
                if (_exception != null) {
                    if(Cashfree.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }
        /// <summary>
        /// Standard Transfer V2 Use this API to initiate an amount transfer at Cashfree Payments. It is an async request by default.
        /// </summary>
        /// <exception cref="cashfree_payout.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApiVersion">It is the API version to be used. The accepted format is YYYY-MM-DD.</param>
        /// <param name="xRequestId">It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments. (optional)</param>
        /// <param name="createTransferRequest">Find the request parameters of the API request to transfer money to a beneficiary. (optional)</param>
        /// <returns>ApiResponse of CreateTransferResponse</returns>
        public cashfree_payout.Client.ApiResponse<CreateTransferResponse> PayoutInitiateTransfer(string xApiVersion, string? xRequestId = default(string?), CreateTransferRequest? createTransferRequest = default(CreateTransferRequest?), Configuration? configuration = null)
        {
            var env = "sandbox";
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                env = "production";
            }
            if(Cashfree.XEnableErrorAnalytics) {
                using (SentrySdk.Init(o =>
                {
                    o.Dsn = "https://7674ee5291124b76894cb90a9ac6a33b@o330525.ingest.sentry.io/4505164135464960";
                    // When configuring for the first time, to see what the SDK is doing:
                    o.Debug = true;
                    // Set traces_sample_rate to 1.0 to capture 100% of transactions for performance monitoring.
                    // We recommend adjusting this value in production.
                    o.TracesSampleRate = 1.0;
                    // Enable Global Mode if running in a client app
                    o.IsGlobalModeEnabled = false;
                    o.EnableTracing = true;
                    o.AttachStacktrace = true;
                    o.Environment = env;
                    o.Release = "0.0.16";
                    o.AddEventProcessor(new CashfreeEventProcessor());
                }));
            }
                var config = new Configuration();
            if(configuration != null) {
                config = configuration;
            }
            this.Client = new cashfree_payout.Client.ApiClient("https://sandbox.cashfree.com/payout");
            if(Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                this.Client = new cashfree_payout.Client.ApiClient("https://api.cashfree.com/payout");
            }
            // verify the required parameter 'xApiVersion' is set
            if (xApiVersion == null)
                throw new cashfree_payout.Client.ApiException(400, "Missing required parameter 'xApiVersion' when calling TransfersV2Api->PayoutInitiateTransfer");

            cashfree_payout.Client.RequestOptions localVarRequestOptions = new cashfree_payout.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cashfree_payout.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = cashfree_payout.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("x-api-version", cashfree_payout.Client.ClientUtils.ParameterToString(xApiVersion)); // header parameter
            if (xRequestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-request-id", cashfree_payout.Client.ClientUtils.ParameterToString(xRequestId)); // header parameter
            }
            localVarRequestOptions.Data = createTransferRequest;

            // authentication (XClientSecret) required
            
            
            // authentication (XClientID) required
            
            

            if (!string.IsNullOrEmpty(Cashfree.XClientId))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-id", Cashfree.XClientId);
            }

            if (!string.IsNullOrEmpty(Cashfree.XClientSecret))
            {
                localVarRequestOptions.HeaderParameters.Add("x-client-secret", Cashfree.XClientSecret);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-platform", "dotnetsdk-0.0.16");

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateTransferResponse>("/transfers", localVarRequestOptions, config);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayoutInitiateTransfer", localVarResponse);
                if (_exception != null) {
                    if(Cashfree.XEnableErrorAnalytics) {
                        var sentryEvent = new SentryEvent(_exception);
                        SentrySdk.CaptureEvent(sentryEvent);
                    }
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }


    /// <summary>
    /// Allows RestSharp to Serialize/Deserialize JSON using our custom logic, but only when ContentType is JSON.
    /// </summary>
    internal class CustomJsonCodec : IRestSerializer, ISerializer, IDeserializer
    {
        private readonly IReadableConfiguration _configuration;
        private readonly JsonSerializerSettings _serializerSettings = new JsonSerializerSettings
        {
            // OpenAPI generated types generally hide default constructors.
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            ContractResolver = new DefaultContractResolver
            {
                NamingStrategy = new CamelCaseNamingStrategy
                {
                    OverrideSpecifiedNames = false
                }
            }
        };

        public CustomJsonCodec(IReadableConfiguration configuration)
        {
            _configuration = configuration;
        }

        public CustomJsonCodec(JsonSerializerSettings serializerSettings, IReadableConfiguration configuration)
        {
            _serializerSettings = serializerSettings;
            _configuration = configuration;
        }

        /// <summary>
        /// Serialize the object into a JSON string.
        /// </summary>
        /// <param name="obj">Object to be serialized.</param>
        /// <returns>A JSON string.</returns>
        public string Serialize(object obj)
        {
            if (obj != null && obj is cashfree_payout.Model.AbstractOpenAPISchema)
            {
                // the object to be serialized is an oneOf/anyOf schema
                return ((cashfree_payout.Model.AbstractOpenAPISchema)obj).ToJson();
            }
            else
            {
                return JsonConvert.SerializeObject(obj, _serializerSettings);
            }
        }

        public string Serialize(Parameter bodyParameter) => Serialize(bodyParameter.Value);

        public T Deserialize<T>(RestResponse response)
        {
            var result = (T)Deserialize(response, typeof(T));
            return result;
        }

        /// <summary>
        /// Deserialize the JSON string into a proper object.
        /// </summary>
        /// <param name="response">The HTTP response.</param>
        /// <param name="type">Object type.</param>
        /// <returns>Object representation of the JSON string.</returns>
        internal object Deserialize(RestResponse response, Type type)
        {
            if (type == typeof(byte[])) // return byte array
            {
                return response.RawBytes;
            }

            // TODO: ? if (type.IsAssignableFrom(typeof(Stream)))
            if (type == typeof(Stream))
            {
                var bytes = response.RawBytes;
                if (response.Headers != null)
                {
                    var filePath = string.IsNullOrEmpty(_configuration.TempFolderPath)
                        ? Path.GetTempPath()
                        : _configuration.TempFolderPath;
                    var regex = new Regex(@"Content-Disposition=.*filename=['""]?([^'""\s]+)['""]?$");
                    foreach (var header in response.Headers)
                    {
                        var match = regex.Match(header.ToString());
                        if (match.Success)
                        {
                            string fileName = filePath + ClientUtils.SanitizeFilename(match.Groups[1].Value.Replace("\"", "").Replace("'", ""));
                            File.WriteAllBytes(fileName, bytes);
                            return new FileStream(fileName, FileMode.Open);
                        }
                    }
                }
                var stream = new MemoryStream(bytes);
                return stream;
            }

            if (type.Name.StartsWith("System.Nullable`1[[System.DateTime")) // return a datetime object
            {
                return DateTime.Parse(response.Content, null, System.Globalization.DateTimeStyles.RoundtripKind);
            }

            if (type == typeof(string) || type.Name.StartsWith("System.Nullable")) // return primitive type
            {
                return Convert.ChangeType(response.Content, type);
            }

            // at this point, it must be a model (json)
            try
            {
                return JsonConvert.DeserializeObject(response.Content, type, _serializerSettings);
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }

        public ISerializer Serializer => this;
        public IDeserializer Deserializer => this;

        public string[] AcceptedContentTypes => RestSharp.ContentType.JsonAccept;

        public SupportsContentType SupportsContentType => contentType =>
            contentType.Value.EndsWith("json", StringComparison.InvariantCultureIgnoreCase) ||
            contentType.Value.EndsWith("javascript", StringComparison.InvariantCultureIgnoreCase);

        public ContentType ContentType { get; set; } = RestSharp.ContentType.Json;

        public DataFormat DataFormat => DataFormat.Json;
    }
    /// <summary>
    /// Provides a default implementation of an Api client (both synchronous and asynchronous implementations),
    /// encapsulating general REST accessor use cases.
    /// </summary>
    internal partial class ApiClient : ISynchronousClient, IAsynchronousClient
    {
        private readonly string _baseUrl;

        /// <summary>
        /// Specifies the settings on a <see cref="JsonSerializer" /> object.
        /// These settings can be adjusted to accommodate custom serialization rules.
        /// </summary>
        public JsonSerializerSettings SerializerSettings { get; set; } = new JsonSerializerSettings
        {
            // OpenAPI generated types generally hide default constructors.
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            ContractResolver = new DefaultContractResolver
            {
                NamingStrategy = new CamelCaseNamingStrategy
                {
                    OverrideSpecifiedNames = false
                }
            }
        };

        /// <summary>
        /// Allows for extending request processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        partial void InterceptRequest(RestRequest request);

        /// <summary>
        /// Allows for extending response processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        /// <param name="response">The RestSharp response object</param>
        partial void InterceptResponse(RestRequest request, RestResponse response);

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" />, defaulting to the global configurations' base url.
        /// </summary>
        public ApiClient()
        {
            _baseUrl = cashfree_payout.Client.GlobalConfiguration.Instance.BasePath;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" />
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        public ApiClient(string basePath)
        {
            if (string.IsNullOrEmpty(basePath))
                throw new ArgumentException("basePath cannot be empty");

            _baseUrl = basePath;
        }

        /// <summary>
        /// Constructs the RestSharp version of an http method
        /// </summary>
        /// <param name="method">Swagger Client Custom HttpMethod</param>
        /// <returns>RestSharp's HttpMethod instance.</returns>
        /// <exception cref="ArgumentOutOfRangeException"></exception>
        private RestSharpMethod Method(HttpMethod method)
        {
            RestSharpMethod other;
            switch (method)
            {
                case HttpMethod.Get:
                    other = RestSharpMethod.Get;
                    break;
                case HttpMethod.Post:
                    other = RestSharpMethod.Post;
                    break;
                case HttpMethod.Put:
                    other = RestSharpMethod.Put;
                    break;
                case HttpMethod.Delete:
                    other = RestSharpMethod.Delete;
                    break;
                case HttpMethod.Head:
                    other = RestSharpMethod.Head;
                    break;
                case HttpMethod.Options:
                    other = RestSharpMethod.Options;
                    break;
                case HttpMethod.Patch:
                    other = RestSharpMethod.Patch;
                    break;
                default:
                    throw new ArgumentOutOfRangeException("method", method, null);
            }

            return other;
        }

        /// <summary>
        /// Provides all logic for constructing a new RestSharp <see cref="RestRequest"/>.
        /// At this point, all information for querying the service is known. Here, it is simply
        /// mapped into the RestSharp request.
        /// </summary>
        /// <param name="method">The http verb.</param>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>[private] A new RestRequest instance.</returns>
        /// <exception cref="ArgumentNullException"></exception>
        private RestRequest NewRequest(
            HttpMethod method,
            string path,
            RequestOptions options,
            IReadableConfiguration configuration)
        {
            if (path == null) throw new ArgumentNullException("path");
            if (options == null) throw new ArgumentNullException("options");
            if (configuration == null) throw new ArgumentNullException("configuration");

            RestRequest request = new RestRequest(path, Method(method));

            if (options.PathParameters != null)
            {
                foreach (var pathParam in options.PathParameters)
                {
                    request.AddParameter(pathParam.Key, pathParam.Value, ParameterType.UrlSegment);
                }
            }

            if (options.QueryParameters != null)
            {
                foreach (var queryParam in options.QueryParameters)
                {
                    foreach (var value in queryParam.Value)
                    {
                        request.AddQueryParameter(queryParam.Key, value);
                    }
                }
            }

            if (configuration.DefaultHeaders != null)
            {
                foreach (var headerParam in configuration.DefaultHeaders)
                {
                    request.AddHeader(headerParam.Key, headerParam.Value);
                }
            }

            if (options.HeaderParameters != null)
            {
                foreach (var headerParam in options.HeaderParameters)
                {
                    foreach (var value in headerParam.Value)
                    {
                        request.AddHeader(headerParam.Key, value);
                    }
                }
            }

            if (options.FormParameters != null)
            {
                foreach (var formParam in options.FormParameters)
                {
                    request.AddParameter(formParam.Key, formParam.Value);
                }
            }

            if (options.Data != null)
            {
                if (options.Data is Stream stream)
                {
                    var contentType = "application/octet-stream";
                    if (options.HeaderParameters != null)
                    {
                        var contentTypes = options.HeaderParameters["Content-Type"];
                        contentType = contentTypes[0];
                    }

                    var bytes = ClientUtils.ReadAsBytes(stream);
                    request.AddParameter(contentType, bytes, ParameterType.RequestBody);
                }
                else
                {
                    if (options.HeaderParameters != null)
                    {
                        var contentTypes = options.HeaderParameters["Content-Type"];
                        if (contentTypes == null || contentTypes.Any(header => header.Contains("application/json")))
                        {
                            request.RequestFormat = DataFormat.Json;
                        }
                        else
                        {
                            // TODO: Generated client user should add additional handlers. RestSharp only supports XML and JSON, with XML as default.
                        }
                    }
                    else
                    {
                        // Here, we'll assume JSON APIs are more common. XML can be forced by adding produces/consumes to openapi spec explicitly.
                        request.RequestFormat = DataFormat.Json;
                    }

                    request.AddJsonBody(options.Data);
                }
            }

            if (options.FileParameters != null)
            {
                foreach (var fileParam in options.FileParameters)
                {
                    foreach (var file in fileParam.Value)
                    {
                        var bytes = ClientUtils.ReadAsBytes(file);
                        var fileStream = file as FileStream;
                        if (fileStream != null)
                            request.AddFile(fileParam.Key, bytes, System.IO.Path.GetFileName(fileStream.Name));
                        else
                            request.AddFile(fileParam.Key, bytes, "no_file_name_provided");
                    }
                }
            }

            return request;
        }

        private ApiResponse<T> ToApiResponse<T>(RestResponse<T> response)
        {
            T result = response.Data;
            string rawContent = response.Content;

            var transformed = new ApiResponse<T>(response.StatusCode, new Multimap<string, string>(), result, rawContent)
            {
                ErrorText = response.ErrorMessage,
                Cookies = new List<Cookie>()
            };

            if (response.Headers != null)
            {
                foreach (var responseHeader in response.Headers)
                {
                    transformed.Headers.Add(responseHeader.Name, ClientUtils.ParameterToString(responseHeader.Value));
                }
            }

            if (response.ContentHeaders != null)
            {
                foreach (var responseHeader in response.ContentHeaders)
                {
                    transformed.Headers.Add(responseHeader.Name, ClientUtils.ParameterToString(responseHeader.Value));
                }
            }

            if (response.Cookies != null)
            {
                foreach (var responseCookies in response.Cookies.Cast<Cookie>())
                {
                    transformed.Cookies.Add(
                        new Cookie(
                            responseCookies.Name,
                            responseCookies.Value,
                            responseCookies.Path,
                            responseCookies.Domain)
                        );
                }
            }

            return transformed;
        }

        private ApiResponse<T> Exec<T>(RestRequest request, RequestOptions options, IReadableConfiguration configuration)
        {
            var baseUrl = _baseUrl;

            var cookies = new CookieContainer();

            if (options.Cookies != null && options.Cookies.Count > 0)
            {
                foreach (var cookie in options.Cookies)
                {
                    cookies.Add(new Cookie(cookie.Name, cookie.Value));
                }
            }

            var clientOptions = new RestClientOptions(baseUrl)
            {
                ClientCertificates = configuration.ClientCertificates,
                CookieContainer = cookies,
                MaxTimeout = configuration.Timeout,
                Proxy = configuration.Proxy,
                UserAgent = configuration.UserAgent,
                UseDefaultCredentials = configuration.UseDefaultCredentials,
                RemoteCertificateValidationCallback = configuration.RemoteCertificateValidationCallback
            };

            using (RestClient client = new RestClient(clientOptions,
                configureSerialization: serializerConfig => serializerConfig.UseSerializer(() => new CustomJsonCodec(SerializerSettings, configuration))))
            {
                InterceptRequest(request);

                RestResponse<T> response;
                if (RetryConfiguration.RetryPolicy != null)
                {
                    var policy = RetryConfiguration.RetryPolicy;
                    var policyResult = policy.ExecuteAndCapture(() => client.Execute(request));
                    response = (policyResult.Outcome == OutcomeType.Successful) ? client.Deserialize<T>(policyResult.Result) : new RestResponse<T>(request)
                    {
                        ErrorException = policyResult.FinalException
                    };
                }
                else
                {
                    response = client.Execute<T>(request);
                }

                // if the response type is oneOf/anyOf, call FromJSON to deserialize the data
                if (typeof(cashfree_payout.Model.AbstractOpenAPISchema).IsAssignableFrom(typeof(T)))
                {
                    try
                    {
                        response.Data = (T) typeof(T).GetMethod("FromJson").Invoke(null, new object[] { response.Content });
                    }
                    catch (Exception ex)
                    {
                        throw ex.InnerException != null ? ex.InnerException : ex;
                    }
                }
                else if (typeof(T).Name == "Stream") // for binary response
                {
                    response.Data = (T)(object)new MemoryStream(response.RawBytes);
                }
                else if (typeof(T).Name == "Byte[]") // for byte response
                {
                    response.Data = (T)(object)response.RawBytes;
                }
                else if (typeof(T).Name == "String") // for string response
                {
                    response.Data = (T)(object)response.Content;
                }

                InterceptResponse(request, response);

                var result = ToApiResponse(response);
                if (response.ErrorMessage != null)
                {
                    result.ErrorText = response.ErrorMessage;
                }

                if (response.Cookies != null && response.Cookies.Count > 0)
                {
                    if (result.Cookies == null) result.Cookies = new List<Cookie>();
                    foreach (var restResponseCookie in response.Cookies.Cast<Cookie>())
                    {
                        var cookie = new Cookie(
                            restResponseCookie.Name,
                            restResponseCookie.Value,
                            restResponseCookie.Path,
                            restResponseCookie.Domain
                        )
                        {
                            Comment = restResponseCookie.Comment,
                            CommentUri = restResponseCookie.CommentUri,
                            Discard = restResponseCookie.Discard,
                            Expired = restResponseCookie.Expired,
                            Expires = restResponseCookie.Expires,
                            HttpOnly = restResponseCookie.HttpOnly,
                            Port = restResponseCookie.Port,
                            Secure = restResponseCookie.Secure,
                            Version = restResponseCookie.Version
                        };

                        result.Cookies.Add(cookie);
                    }
                }
                return result;
            }
        }

        private async Task<ApiResponse<T>> ExecAsync<T>(RestRequest request, RequestOptions options, IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var baseUrl = configuration.GetOperationServerUrl(options.Operation, options.OperationIndex) ?? _baseUrl;

            var clientOptions = new RestClientOptions(baseUrl)
            {
                ClientCertificates = configuration.ClientCertificates,
                MaxTimeout = configuration.Timeout,
                Proxy = configuration.Proxy,
                UserAgent = configuration.UserAgent,
                UseDefaultCredentials = configuration.UseDefaultCredentials
            };

            using (RestClient client = new RestClient(clientOptions,
                configureSerialization: serializerConfig => serializerConfig.UseSerializer(() => new CustomJsonCodec(SerializerSettings, configuration))))
            {
                InterceptRequest(request);

                RestResponse<T> response;
                if (RetryConfiguration.AsyncRetryPolicy != null)
                {
                    var policy = RetryConfiguration.AsyncRetryPolicy;
                    var policyResult = await policy.ExecuteAndCaptureAsync((ct) => client.ExecuteAsync(request, ct), cancellationToken).ConfigureAwait(false);
                    response = (policyResult.Outcome == OutcomeType.Successful) ? client.Deserialize<T>(policyResult.Result) : new RestResponse<T>(request)
                    {
                        ErrorException = policyResult.FinalException
                    };
                }
                else
                {
                    response = await client.ExecuteAsync<T>(request, cancellationToken).ConfigureAwait(false);
                }

                // if the response type is oneOf/anyOf, call FromJSON to deserialize the data
                if (typeof(cashfree_payout.Model.AbstractOpenAPISchema).IsAssignableFrom(typeof(T)))
                {
                    response.Data = (T) typeof(T).GetMethod("FromJson").Invoke(null, new object[] { response.Content });
                }
                else if (typeof(T).Name == "Stream") // for binary response
                {
                    response.Data = (T)(object)new MemoryStream(response.RawBytes);
                }
                else if (typeof(T).Name == "Byte[]") // for byte response
                {
                    response.Data = (T)(object)response.RawBytes;
                }

                InterceptResponse(request, response);

                var result = ToApiResponse(response);
                if (response.ErrorMessage != null)
                {
                    result.ErrorText = response.ErrorMessage;
                }

                if (response.Cookies != null && response.Cookies.Count > 0)
                {
                    if (result.Cookies == null) result.Cookies = new List<Cookie>();
                    foreach (var restResponseCookie in response.Cookies.Cast<Cookie>())
                    {
                        var cookie = new Cookie(
                            restResponseCookie.Name,
                            restResponseCookie.Value,
                            restResponseCookie.Path,
                            restResponseCookie.Domain
                        )
                        {
                            Comment = restResponseCookie.Comment,
                            CommentUri = restResponseCookie.CommentUri,
                            Discard = restResponseCookie.Discard,
                            Expired = restResponseCookie.Expired,
                            Expires = restResponseCookie.Expires,
                            HttpOnly = restResponseCookie.HttpOnly,
                            Port = restResponseCookie.Port,
                            Secure = restResponseCookie.Secure,
                            Version = restResponseCookie.Version
                        };

                        result.Cookies.Add(cookie);
                    }
                }
                return result;
            }
        }

        #region IAsynchronousClient
        /// <summary>
        /// Make a HTTP GET request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> GetAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Get, path, options, config), options, config, cancellationToken);
        }

        /// <summary>
        /// Make a HTTP POST request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> PostAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Post, path, options, config), options, config, cancellationToken);
        }

        /// <summary>
        /// Make a HTTP PUT request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> PutAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Put, path, options, config), options, config, cancellationToken);
        }

        /// <summary>
        /// Make a HTTP DELETE request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> DeleteAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Delete, path, options, config), options, config, cancellationToken);
        }

        /// <summary>
        /// Make a HTTP HEAD request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> HeadAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Head, path, options, config), options, config, cancellationToken);
        }

        /// <summary>
        /// Make a HTTP OPTION request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> OptionsAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Options, path, options, config), options, config, cancellationToken);
        }

        /// <summary>
        /// Make a HTTP PATCH request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> PatchAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Patch, path, options, config), options, config, cancellationToken);
        }
        #endregion IAsynchronousClient

        #region ISynchronousClient
        /// <summary>
        /// Make a HTTP GET request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Get<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Get, path, options, config), options, config);
        }

        /// <summary>
        /// Make a HTTP POST request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Post<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Post, path, options, config), options, config);
        }

        /// <summary>
        /// Make a HTTP PUT request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Put<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Put, path, options, config), options, config);
        }

        /// <summary>
        /// Make a HTTP DELETE request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Delete<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Delete, path, options, config), options, config);
        }

        /// <summary>
        /// Make a HTTP HEAD request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Head<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Head, path, options, config), options, config);
        }

        /// <summary>
        /// Make a HTTP OPTION request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Options<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Options, path, options, config), options, config);
        }

        /// <summary>
        /// Make a HTTP PATCH request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Patch<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Patch, path, options, config), options, config);
        }
        #endregion ISynchronousClient
    }
}
